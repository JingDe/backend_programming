
nginx主进程记录worker进程的数据结构：

sockpair通信的句柄
进程方法

进程名称，进程ID，进程各种状态标志



typedef struct {
    // 进程ID
    ngx_pid_t pid;
	
    // 由waitpid系统调用获取到的进程状态
    int status;
	
    /*这是由socketpair系统调用产生出的用于进程间通信的socket句柄，
	这一对socket句柄可以互相通信，目前用于master父进程与worker子进程间的通信，详见14.4节*/
    ngx_socket_t channel[2];
	
    // 子进程的循环执行方法，当父进程调用ngx_spawn_process生成子进程时使用
	ngx_spawn_proc_pt proc;
	
    /*上面的ngx_spawn_proc_pt方法中第2个参数需要传递1个指针，它是可选的。
	例如，worker子进程就不需要，而cache manage进程就需要ngx_cache_manager_ctx上下文成员。
	这时，data一般与ngx_spawn_proc_pt方法中第2个参数是等价的*/
    void *data;
	
    // 进程名称。操作系统中显示的进程名称与name相同
    char *name;
	
    // 标志位，为1时表示在重新生成子进程
    unsigned respawn:1;
	
    // 标志位，为1时表示正在生成子进程
    unsigned just_spawn:1;
	
    // 标志位，为1时表示在进行父、子进程分离
    unsigned  detached:1;
	
    // 标志位，为1时表示进程正在退出
    unsigned exiting:1;
	
    // 标志位，为1时表示进程已经退出
    unsigned exited:1;
} ngx_process_t;











